// defining the geometry of the scaffold and constructing the msh

IFMACRO(!idpGeometry)
macro idpGeometry 1 // prevent multiple include statements

// Create initial mesh
mesh3 Mesh; // main mesh file
mesh3 initialMesh; // backup of the initial mesh, not adapted, useful for mesh refinement during simulation
if (mpirank==0) // mesh generation only in one MPI process
{
  if (importMesh) // if we want to read external mesh, we should properly define phi function too
  {
    initialMesh = readmesh3(meshFileName);
  }
  else // generate mesh using tetgen instead
  {
    initialMesh = cube(2, 2, 2, [L*x, L*y, L*z]); // initial mesh is 2*2*2 but then is modified using tetgen
    real[int] domain = [0, 0, 0, 0, 1];
    // initla simple mesh is converted to a complex tetrahedral mesh using tetgem
    initialMesh = tetgreconstruction(initialMesh, switch="raAQ", regionlist=domain, sizeofvolume=(L*1./meshSize)^3 / 6);
  }
  Mesh = initialMesh; // we will work with Mesh from now on. The initialMesh remains unmodified.
}
broadcast(processor(0), Mesh); // all processes wait for process #0 to give them the new Mesh

// creating Finite element spaces
fespace SpaceP1(Mesh, P1); // used for all the dependent variables and distance funtion
fespace SpaceP0(Mesh, P0); // used to calculate the available scaffold volume

SpaceP1 phi; // main distance function, positive inside and negative outside of the scaffold
SpaceP1 phiTemp; // temporary variable for redistancing distance function
SpaceP1 mm; //mshmet metrics for mesh adaptation

// initilize distance function based on the geometry
if (mpirank == 0)
{
  if (importMesh)
    for (int i = 0; i < Mesh.nv; i++)
      phi[][i] = processRegion(Mesh(Mesh(i).x, Mesh(i).y, Mesh(i).z).region);
  else
    phi = box - 0.5;
}
broadcast(processor(0), phi[]); // broadcast initialized function to all processes

if (refineInitialMesh) // adapt initial mesh according to the phi function
{
  if (mpirank == 0) // mesh refinement is done only in one process
  {
    mm = 0.;
    // computing the mesh adaptation index for each element using mshmet to pass it to tetgen
    mm[]=mshmet(Mesh,(phi>0),normalization=1,aniso=0,nbregul=1,hmin=4e-2,hmax=0.8,err=mshmetError);
    Mesh=tetgreconstruction(Mesh,switch="raAQ",sizeofvolume=mm*mm*mm/6.); // actual mesh refinement using tetgen
  }
  broadcast(processor(0), Mesh);
  phi = phi; // mesh is changed, so we have to interpolate distance function variable into new mesh
}

// divide the mesh for parallelization according to the number of available MPI processes
if (mpirank == 0) // only one process does the initilization
{
  // real c = mpisize/real(Mesh.nt);
  // Mesh = change(Mesh, fregion= min(mpisize-1,int(nuTriangle*c)));
  // I don't know why yet, but the above approach does not work properly when we importing
  // an external mesh. The following messy approach has a little bit better performance
  Mesh = change(Mesh, fregion = nuTriangle%mpisize);
}
broadcast(processor(0), Mesh);

if (mpirank==0)
{
  // print mesh and problem dimentions
  printDivider;
  print("Finite Element DOF: " + SpaceP1.ndof);
  print("Number of Elements: " + Mesh.nt);
  if (saveInitialMesh) // save the mesh after possible adaptation
  {
    cout << "Saving initial mesh ..." << endl;
    savevtk("initialMesh.vtk", Mesh, phi, dataname="phi");
  }
}

// redistancing is mandatory at the beginning
if (mpirank==0) // only one process does the redistancing
{
  distance(Mesh, phi, phiTemp[]);
  phi = phiTemp;
}
broadcast(processor(0), phi[]); // broadcast is a collective task in MPI, so there is no need to call mpiBarrier


ENDIFMACRO
