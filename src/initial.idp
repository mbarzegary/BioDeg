// defining initial condition of the simulation as well as initializing variables

IFMACRO(!idpInitial)
macro idpInitial 1 // prevent multiple include statements

// initial value of domain variables
Mg = Mgbc*(phi > 0); // Mg is initialized in scaffold only (equals to saturation concentration)
F = 0; // there is no film at the beginning
Cl = 3.306e-6*(phi <= 0); // initial concentration of chloride ion in the medium
OH = 1e-7*(phi <= 0); // initial pH = 7

// initial value of effective diffusion coeffiecients is the same as materials coefficients
DeMg = DMg;
DeCl = DCl;
DeOH = DOH;

if (!refineMeshDuringSimulation) // otherwise these values will (and should) be calculated in each time step
{
  hhh = hTriangle;
  h = hhh[].min; // smallest element size
  // the value of h should be the same for all processes
  mpiAllReduce(h, h, mpiCommWorld, mpiMIN);
}

// store the inital volume size of the scaffold
// Vinit = int3d(Mesh,optimize=0)(scaffold);
// in partitioned mesh, we should collect the value from different processes
loc = intN(MeshNoOverlap)(scaffold);
glob = 0;
mpiAllReduce(loc, glob, mpiCommWorld, mpiSUM);
Vinit = glob;

// compute the multiplier coefficient of hydrogen evolution equation based on ideal gas law
// here we use the approximation of the initial area of the scaffold
loc = int2d(MeshNoOverlap, levelset=phi)(1.);
glob = 0; // stores initial area here
mpiAllReduce(loc, glob, mpiCommWorld, mpiSUM);
real initialArea = glob;
conv = 82.057 * 310.15 * Mgsolid / (24.305 * 0.01 * glob);
scaffoldSizeOld = Vinit;

// if time to each redistance is less than the time step make it equal to time step
dtRedistance = dtRedistance >= dt ? dtRedistance : dt;



ENDIFMACRO
