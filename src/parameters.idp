// all the parameters that configure the overall process of simulation

IFMACRO(!idpParameters)
macro idpParameters 1 // prevent multiple include statements

// if one parameter needs to be read from command line args, the syntax is as follows:
// real k1 = getARGV("-k1", 2.); //for floats
// int run = getARGV("-run", 1); //for integers

verbosity = 0; // ask FreeFEM not to print info on terminal


// Solver parameters
real TGV = 1e8; //Huge value used to implement Dirichlet boundary conditions

string textOutputFilename = "output/result.txt"; // path to text output file
string vtkOutputFilename = "output/output"; // path to text output file
bool writeVtkOutput = true; // save vtk output or not
bool saveInitialMesh = false; // whether save initial mesh after refinement in vtk
bool saveInitialPartitionedMesh = false; // whether save initial mesh after partitioning
// if the model is symmetric, we can multiply the predicted mass loss to inverse of the fraction
// to match it with the full model. for example, if the simulated model is half of the
// full model, the below parameter should be 2, and the mass loss value will be for a full model
// it only affects the written text output (and not the terminal output)
real saveMultiplier = 1.0; // if it's a symmetric model, the quantitaive output should be multiplied
bool outputPerArea = false; // should the (text) output be per unit area or not
bool saveLastTimeStep = true; // save the last state of the model in vtu

bool refineInitialMesh = false; // should initial mesh be refined based on distance function, recommended for internal mesh only
bool refineMeshDuringSimulation = false; // should mesh be refined during simulation
bool keepPreviousRefinedMesh = false; // adapt the mesh in the interface and do not modify previous refined mesh
bool doRedistance = true; // whether redistance the distance function during simulation or not
real scaffoldChangeThreshold = 5.0; // shrink percentage at which mesh should be refined again

bool solveFluidFlow = true; // solve the fluid flow equation or not
bool solveFullNavierStokes = true; // otherwise it solves only the Stokes equation
bool writeFlowFieldOutput = true; // write the velocity components and pressure to the vtk file or not
int solveFluidEach = 10;

// Geometry parameters
bool importMesh = true; // import external mesh or create one using tetgen
// parameters for importing external mesh
string meshFileName = "mesh/sphere.mesh";

int scaffoldLabel = 1; // scaffold volume label in external mesh file
int mediumLabel = 2; // medium volume label in external mesh file
// int surfaceLabel = 0; // interface of scaffold/medium label in external mesh file
int Wall = 3;  // wall surface label in the external mesh for fluid flow
int Inlet = 4; // inlet surface label in the external mesh for fluid flow
int Outlet = 5; // outlet surface label in the external mesh for fluid flow

// parameters to generate a mesh using tetgen
real L = 20.; // length of the main mesh box (mm)
int meshSize = 32; // number of mesh nodes on each edge of the box
real mshmetError = 4e-2; // tolerance for mesh refinement, used by mshmet
real meshMin = 4e-2; // minimum size of elements during mesh refinement
real meshMax = 0.8; // minimum size of elements during mesh refinement

// Time parameters
real dt = 0.025; // time step (hour)
int saveEach = 0.25 / dt; // number of steps between each output.
// Here it is calculated to save every 1.0 hour, assuming dt is a proper multiplier.
real Tfinal = 21.; // final time (hour)
Tfinal += dt;
real dtRedistance = 1.0; // time to each redistance of the distance funtion

// Export scaffold mesh paramters
bool exportScaffoldMesh = false;
int saveScaffoldEach = 1. / dt; // number of steps between each mesh output
bool exportVolume = true;
bool exportSurface = true;

// Material parameters
real tau = 1; // torquosity of the film
real eps = 0.55; // porosity of the film
real del = 1; // constrictivity

// Fluid properties
real uInX = 0.1; // inlet velocity
real uInY = 0;
real uInZ = 0;
real nu = 0.85;

real k1 = getARGV("-k1", 7.); // film formation rate (1/hour)
real k2 = getARGV("-k2", 1e15); // film disolution rate (mm^6/hour.g^2)
real DMg = getARGV("-dmg", 0.05); // diffusion coefficient of Mg (mm^2/hour)
real DCl = getARGV("-dcl", 0.05); // diffusion coefficient of Cl (mm^2/hour)
real DOH = 25.2; // diffusion coefficient of OH (mm^2/hour)

real Mgsolid = 1735.0*1e-6; // Mg density (g/mm^3)
real Fsolid = 2344.6*1e-6; // density of the film (g/mm^3)
real Fcoef = getARGV("-fcoef", 1.);
real Fmax = Fsolid * (1 - eps) * Fcoef; // maximum protective film concentration (g/mm^3)
real Mgbc = 134.*1e-6; // Mg saturation concentration (g/mm^3)
real Clinital = 5.175e-6; // initial Cl concentration (g/mm^3)
real OHinitla = 1e-7; // initial concentration of OH (g/mm^3)
// real Clbc = 0; // Cl saturation concentration (g/mm^3)
// real OHbc = 1e-7; // concentration of OH at the boundary of scaffold (g/mm^3)


real alphaCoeff = getARGV("-acoef", 0.); // value that will be multiplied to the calucalted alphaCoeff
// a zero alphaCoeff leads to no initial velocity of interface

// parallelization, partitioning, and PETSc parameters
func Pk = P1; // type of elements, used by partitioning functions
func PkVector = [P2, P2, P2, P1]; // type of elements for fluid flow
// -pc_type hypre -ksp_view -ksp_monitor
string aParams = "-pc_type bjacobi "; // "-ksp_view ";
string[int] names(2); // fieldsplit names
names[0] = "velocity";
names[1] = "pressure";
string nsParams = "-ksp_monitor -ksp_type fgmres -ksp_converged_reason -pc_type fieldsplit -pc_fieldsplit_type schur "
                + "-fieldsplit_velocity_pc_type gamg -fieldsplit_pressure_ksp_max_it 5 "
                + "-fieldsplit_pressure_pc_type jacobi -fieldsplit_velocity_ksp_type preonly -pc_fieldsplit_schur_fact_type full";

ENDIFMACRO
