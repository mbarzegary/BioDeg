// all the parameters that configure the overall process of simulation

IFMACRO(!idpParameters)
macro idpParameters 1 // prevent multiple include statements

// if one parameter needs to be read from command line args, the syntax is as follows:
// real k1 = getARGV("-k1", 2.); //for floats
// int run = getARGV("-run", 1); //for integers

verbosity = 0; // ask FreeFEM not to print info on terminal


// Solver parameters
real TGV = 1e8; //Huge value used to implement Dirichlet boundary conditions

string textOutputFilename = "output/result.txt"; // path to text output file
string vtkOutputFilename = "output/output"; // path to text output file
bool writeVtkOutput = true; // save vtk output or not
bool saveInitialMesh = false; // whether save initial mesh after refinement in vtk
bool saveInitialPartitionedMesh = false; // whether save initial mesh after partitioning
// if the model is symmetric, we can multiply the predicted mass loss to inverse of the fraction
// to match it with the full model. for example, if the simulated model is half of the
// full model, the below parameter should be 2, and the mass loss value will be for a full model
// it only affects the written text output (and not the terminal output)
real saveMultiplier = 1.0; // if it's a symmetric model, the quantitaive output should be multiplied
bool outputPerArea = false; // should the (text) output be per unit area or not
bool saveLastTimeStep = true; // save the last state of the model in vtu

bool refineInitialMesh = false; // should initial mesh be refined based on distance function, recommended for internal mesh only
bool refineMeshDuringSimulation = false; // should mesh be refined during simulation
bool keepPreviousRefinedMesh = false; // adapt the mesh in the interface and do not modify previous refined mesh
bool doRedistance = false; // whether redistance the distance function during simulation or not
real scaffoldChangeThreshold = 5.0; // shrink percentage at which mesh should be refined again


// Geometry parameters
bool importMesh = true; // import external mesh or create one using tetgen
// parameters for importing external mesh
string meshFileName = "mesh/thinFull.mesh";
int scaffoldLabel = 1; // scaffold volume label in external mesh file
int mediumLabel = 2; // medium volume label in external mesh file
int surfaceLabel = 3; // interface of scaffold/medium label in external mesh file
bool improveImportedMesh = true; // try to increase the number of imported elements in the scaffold
// parameters to generate a mesh using tetgen
real L = 20.; // length of the main mesh box (mm)
int meshSize = 32; // number of mesh nodes on each edge of the box
real mshmetError = 4e-2; // tolerance for mesh refinement, used by mshmet
real meshMin = 4e-2; // minimum size of elements during mesh refinement
real meshMax = 0.8; // minimum size of elements during mesh refinement

// Time parameters
real dt = 0.025; // time step (hour)
int saveEach = 0.25 / dt; // number of steps between each output.
// Here it is calculated to save every 1.0 hour, assuming dt is a proper multiplier.
real Tfinal = 22.; // final time (hour)
Tfinal += dt;
real dtRedistance = 0.05; // time to each redistance of the distance funtion


// Material parameters
real tau = 1; // torquosity of the film
real eps = 0.55; // porosity of the film
real del = 1; // constrictivity

real k1 = getARGV("-k1", 7.); // film formation rate (1/hour)
real k2 = getARGV("-k2", 1e10); // film disolution rate (mm^6/hour.g^2)
real DMg = getARGV("-dmg", 0.); // diffusion coefficient of Mg (mm^2/hour)
real DCl = getARGV("-dcl", 0.05); // diffusion coefficient of Cl (mm^2/hour)
real DOH = 25.2; // diffusion coefficient of OH (mm^2/hour)

real Mgsolid = 1735.0*1e-6; // Mg density (g/mm^3)
real Fsolid = 2344.6*1e-6; // density of the film (g/mm^3)
real Fcoef = getARGV("-fcoef", 1.);
real Fmax = Fsolid * (1 - eps) * Fcoef; // maximum protective film concentration (g/mm^3)
real Mgbc = 134.*1e-6; // Mg saturation concentration (g/mm^3)
real Clbc = 0; // Cl saturation concentration (g/mm^3)
real OHbc = 1e-7; // concentration of OH at the boundary of scaffold (g/mm^3)

real alphaCoeff = getARGV("-acoef", 0.); // value that will be multiplied to the calucalted alphaCoeff
// a zero alphaCoeff leads to no initial velocity of interface

// parallelization, partitioning, and PETSc parameters
func Pk = P1; // type of elements, used by partitioning functions
// -pc_type hypre
string phiParams = ""; // "-ksp_view ";
string mgParams = ""; // "-ksp_view ";
string filmParams = ""; // "-ksp_view ";
string clParams = ""; // "-ksp_view ";
string ohParams = ""; // "-ksp_view ";

ENDIFMACRO
